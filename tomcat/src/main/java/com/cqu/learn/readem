tomcat本质上是一个什么呢？是一个进程？
我觉得是一个运行在电脑上的，端口可配置的一个进程
只是这个进程是可以处理远程来的请求的，所以，涉及到网络通信的知识

tomcat的结构：
一个server，是最顶层的模块，代表的是整个服务器
一个server包含至少一个也可以多个service，这个service用于提供具体的服务，比如响应请求等
一个service下面需要有人干活，所以需要有connector和container
connector负责与连接有关的事情，比如将http连接转化为socket连接等
container用于封装和管理servlet，以及处理这些http请求
一个service下可以有多个connector，但是只能有一个container，因为连接处理可以处理http、https等
但是处理请求只能有一个container，因为如果有多个处理器的话，肯定会冲突啊
所以只有一个container嘛，那么在tomcat/conf中就有一个server.xml文件，就是用来给该对象进行配置的
包括启动监听的端口啊，断开监听的端口啊什么的。这个配置文件的编写格式，很好的提现了：
一个server有多个service，一个service有多个connector和container等

connector和container
当一个请求来到service之后，service会将该请求交给connector，这个请求是什么协议就用什么协议的connector来实现
将对应的协议封装成request和response，然后，这些请求会交给container来处理。处理完毕之后，connector再将request和response
封装成socket返回，这个请求就处理完了。所以connector干的事情就是将socket与http s 之间进行相互转换。
所以需要同时实现http协议和tcp/ip协议

现在来看connector的一些细节：
如何接收请求？
如何将socket和http进行相互转化
封装完的request和response是如何交给container的
container处理完毕后，是如何再次交给connector的

connector内部原理
connector里面有一个重要的部件就是ProtocolHandler
该部件有不同的种类：Http11Protocol、Http11NioProtocol等，是用来处理不同的socket连接的

ProtocolHandler包含三个部分：Endpoint、Processor、Adapter
Endpoint用于处理socket连接，Processor用于将socket转化为request，adapter用于将request交给container
也就是说：endpoint是用来实现socket连接的，所以它要实现tcp/ip协议
processor是用来将socket转化为http连接的，所以它需要实现http协议
其中Endpoint包含三个部分：
acceptor：用于接收socket请求
handler：用于调用processor将socket转化为http请求或者其他请求
asyncTimeout用于检查request的超时

接下来是service内部结构
首先说清楚，什么是service的内部结构
service里面包含engine，一个service只能包含一个engine，用来管理多个站点
一个engine里面可以有多个host，代表主机，或者是站点，这个engine就是用来管理host的
一个host里面可以用多个context，代表应用，对应我们写的一个webapp或者一个web.xml
context是我们写的应用，那么它可以包含多个wrapper，代表一个servlet

接下来是container内部分析
container是基于pipeline-value的模式来处理请求的
这是一个责任链模式，按照以下的步骤来进行处理：
Engine->Host->Context->Wrapper，当调用Wrapper里面的StandardWrapperValue之后，就会创建FilterChain
接着就是开始执行filter，执行servlet中的service方法等

2019/10/9
