Zookeeper
1，工作机制
从设计模式上来看，是一个观察者模式设计实现，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化
它就通知已经在 Zookeeper 上注册的观察者，并作出相应的反应

2，实现原理
文件系统+通知机制

3，Zookeeper 集群
Zookeeper 集群本质上是多个 Zookeeper 的实例，运行在不同的服务器上，构成集群。集群中有一个 leader，表示领导，其余的全是 follower
集群中只要存在半数以上实例，就可以正常运行，每个实例保存相同的数据信息

4，数据模型结构
整体上是一棵树，每个节点被称为 ZNode，能保存 1mb 的数据，每个节点可以通过路径唯一标识

5，应用场景
统一命名服务、同一配置管理、同一集群管理、服务器节点动态上下线、软均衡负载
统一命名服务：对服务统一命名，便于记住，就类似于场景：客户端访问 ZNode，然后 Zookeeper 直接将这个请求映射到这个 ZNode
下的子节点
统一配置管理：一个集群中，所有的实例的配置文件需要同步：将配置信息写到一个 ZNode 中，集群中的实例，直接监听这个节点，就可以拿到配置信息的修改
统一集群管理：分布式环境中，掌握所有的节点的状态。将集群节点中的信息，写入到 ZNode 中，就可以保证信息的实时监听
节点动态上下线：服务器将自己是否在线的状态写到 ZNode 中，客户端直接监听 ZNode，并作出相应的改变
软负载均衡：将每台服务器的访问数，记录在 ZNode 中，并根据访问数，分配合适的连接者

6，安装

7，内部原理
7.1 半数机制，集群中半数以上机器存活，集群可用，适合奇数台服务器部署
7.2 配置文件中没有指定 leader 和 follower。leader 通过内部的选举机制产生，如何选举？：假设服务器是一台一台增加的，这也符合我们
配置 Zookeeper 的准则。每个实例一般都会只投自己，如果投自己不行，就投服务器id最大的实例，依次类推，得出 leader
7.3 ZNode 的类型
持久性：客户端与服务端断开之后，创建的节点不删除
短暂性：客户端与服务端断开，创建的节点自己删除
7.4 写数据流程
客户端向服务端上发送一个写请求，如果这个服务端不是 leader，这个服务端会将这请求转发给 leader，然后 leader
会将这个写请求广播到所有的服务器上。大多数服务器写完了，那么 leader 就告诉写请求的这个服务器，写成功了。服务器再通知客户端
写成功了