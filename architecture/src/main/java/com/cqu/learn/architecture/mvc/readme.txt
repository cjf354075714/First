MVC 模型不是来源于 Web 开发，是来自于传统的 B/S 结构，它是一种项目的结构模式，不是设计模式，所以在 architecture 下
在学习 MVC 模型之前，先看为什么要出现 MVC，传统的 Web 编程是怎么样的

1，很久以前的网络访问，实际上就是查看远程计算机上的数据。如何查看，就是通过 HTTP 访问到目标计算机上的字符串数据
后来，字符串不人性化，就诞生了 HTML，当然它还是字符串，只是浏览器能够识别这些字符串了，就有了丰富的文本体验
这些字符串就是使用后端编程语言拼接而成的，比如使用 JAVA 去实现 HTTP 协议，监听端口，返回字符串信息等，这就是最初始的网络访问的
本质

2，后来复杂的 HTML 网页是不可能去使用拼接的方式来生成的，然后我们就发现大部分的网页基本结构都是 HTML 的元素，只是
小部分需要根据不同的登录人员进行修改，之后就出现了 JSP、PHP、ASP 三种技术，本质上是各种语言对 HTML 的实现，它们都是先解析
其中的语言，然后动态的输出字符串文字。

3，但是，2 阶段的 HTML 网页是后端生成的，是无法改变的，直到后来 JAVAScript 的出现。JAVAScript 是一种在浏览器环境下运行的脚本语言
是浏览器提供运行环境，解释 JAVAScript。至于后来出现的 Node，本质上是一个新的 JAVAScript 环境而已。这样，使用 JAVAScript 就
可以实现最初级的前后端分离，也就是 MVC

4，原生的 JAVAScript 不好用，出现了 jQuery，这是一个 JS 的框架，就是它完成了前端面向 DOM 编程，就是说：使用 jQuery 是面向 DOM 编程
因为在 jQuery 眼中，所有的 HTML 节点都是一个 DOM，它是对 DOM 进行操作的

5，从 MVC 开始
M：model，是指获取的数据和如何获取数据的逻辑，比如我们项目中有一个业务对象，这个业务对象就可以作为一个 Model
V：view，指前端显示的视图，比如一个按钮，一个输入框等，这个 V 和 M 是有交互的
C：controller，就是指处理前端请求，返回后端响应的控制器，就是对 V 和 M 的结合和分离

6，MVVM
本来，view 的一个请求是 controller 来处理的，前后端传的数据也是很简单的，所以 controller 可以处理这些请求
到现在，前后端传递的数据太过复杂， controller 本来就不需要来解析数据，就将这部分的逻辑，交给了 VM 去处理
也就是说，MVVM 中还是存在 C 的，只是存在感降低了，前后端的数据由 viewMode 来解析，并交给 C 来处理