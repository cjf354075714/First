操作系统类型：
按照操作系统的时代发展，操作系统有四个种类，最重要的就是分时操作系统
现在我们用的就是分时操作系统，由于 CPU 的时间段切换太快，所以对我们而言
我们感觉一直拥有了操作系统，但实际上不是

操作系统整体架构：
1，整体式结构：
内部多个模块构成，向上提供结构。模块设计、编码、调试独立，模块间调用自由
模块间通信以全局变量的形式完成。但消息传递随意，维护更新困难

2，层次结构：
其实本质上还是模块化的结构，只不过这些模块按照顺序分层，并且越底层越靠近硬件
越高层越靠近应用，有点类似于 TCP/IP 协议栈

3，微内核结构
操作系统 = 微内核 + 核外服务器
微内核只负责操作系统中的最主要的，最简便的服务，核外服务器面向用户，是用户调用的对象
微内核功能：与硬件的交互、基本的功能、客户与服务器的通信
核外服务器：若干个服务器或者进程的方式存在，比如进程/线程服务器、设备管理服务器等

CPU的态
CPU在不同的态下，可以运行不同的指令，特别是高级的指令，只能是在某些特殊的态下才能执行
内核态：kernel mode，能够访问计算机的所有资源和指令，管理程序/OS内核
用户态：user mode，访问资源有限，指令有限，就是我们的应用程序
内核态和用户态之间的转化，比如应用程序试图执行更高级的程序等。
硬件按照 态 来区分 CPU 的状态
操作系统按照 进程 来区分 CPU 状态


应用程序访问硬件是通过操作系统来实现的，比如 JAVA 程序访问磁盘，就是通过操作系统实现的

CPU 访问数据 -> 寄存器 -> 高速缓存 -> 内存 -> 硬盘

CPU 中断
当 CPU 收到一个中断信号之后，会暂定当前的工作，然后转去执行中断信息来源的函数，处理完毕后
回到原来工作的中断处，继续工作

中断类型：强迫性中断、自愿中断、外部中断、内部中断
我们不知道的中断，比如 I/O、外部中断
自愿中断：
外部中断：
内部中断：
断点：表示程序中断的地方，即下一条将要执行的指令
现场：表示存储该程序的相关信息的寄存器

操作系统的启动过程
